/*
 * Script to initialize the database.
 */


CREATE TYPE actors_available AS ENUM ('member', 'organization');

CREATE TABLE actors (
	id text PRIMARY KEY,
	actortype actors_available
);

CREATE TABLE messages_sent (
	actor text REFERENCES actors NOT NULL,
	message bigint REFERENCES messages NOT NULL
);

CREATE TABLE messages_recieved (
	actor text REFERENCES actors NOT NULL,
	message bigint REFERENCES messages NOT NULL
);

CREATE TABLE messages (
	id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	content text NOT NULL,
	ctime timestamptz NOT NULL,
	mtime timestamptz NOT NULL,
	changelog text[]
);

CREATE TABLE belongings (
	-- "user" and "group" are both reserved
	member text REFERENCES actors NOT NULL,
	organization text REFERENCES actors NOT NULL
	-- privilege
);

CREATE FUNCTION check_actor_type() RETURNS trigger AS $check_actor_type$
	DECLARE
		actortype actors_available;
  BEGIN

    SELECT type INTO actortype FROM actors WHERE id = NEW.member;
    IF actortype <> 'member' THEN
      RAISE EXCEPTION 'a group id is passed in place of user id';
    END IF;

		SELECT type INTO actortype FROM actors WHERE id = NEW.organization;
    IF actortype <> 'organization' THEN
      RAISE EXCEPTION 'a user id is passed in place of group id';
		END IF;

    RETURN NEW;
  END;
$check_actor_type$ LANGUAGE plpgsql;

CREATE CONSTRAINT TRIGGER check_type AFTER INSERT OR UPDATE ON belongings
	FROM actors
	FOR EACH ROW
	EXECUTE FUNCTION check_actor_type();